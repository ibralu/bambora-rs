/*
 * Bambora Payments
 *
 * https://api.na.bambora.com
 *
 * The version of the OpenAPI document: 1.0.1
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`profiles_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProfilesPostError {
    Status400(crate::models::BamboraException),
    Status401(crate::models::BamboraException),
    Status402(crate::models::BamboraException),
    Status403(crate::models::BamboraException),
    Status405(crate::models::BamboraException),
    Status500(crate::models::BamboraException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`profiles_profile_id_cards_card_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProfilesProfileIdCardsCardIdDeleteError {
    Status400(crate::models::BamboraException),
    Status401(crate::models::BamboraException),
    Status402(crate::models::BamboraException),
    Status403(crate::models::BamboraException),
    Status405(crate::models::BamboraException),
    Status500(crate::models::BamboraException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`profiles_profile_id_cards_card_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProfilesProfileIdCardsCardIdPutError {
    Status400(crate::models::BamboraException),
    Status401(crate::models::BamboraException),
    Status402(crate::models::BamboraException),
    Status403(crate::models::BamboraException),
    Status405(crate::models::BamboraException),
    Status500(crate::models::BamboraException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`profiles_profile_id_cards_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProfilesProfileIdCardsGetError {
    Status400(crate::models::BamboraException),
    Status401(crate::models::BamboraException),
    Status402(crate::models::BamboraException),
    Status403(crate::models::BamboraException),
    Status405(crate::models::BamboraException),
    Status500(crate::models::BamboraException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`profiles_profile_id_cards_post`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProfilesProfileIdCardsPostError {
    Status400(crate::models::BamboraException),
    Status401(crate::models::BamboraException),
    Status402(crate::models::BamboraException),
    Status403(crate::models::BamboraException),
    Status405(crate::models::BamboraException),
    Status500(crate::models::BamboraException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`profiles_profile_id_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProfilesProfileIdDeleteError {
    Status400(crate::models::BamboraException),
    Status401(crate::models::BamboraException),
    Status402(crate::models::BamboraException),
    Status403(crate::models::BamboraException),
    Status405(crate::models::BamboraException),
    Status500(crate::models::BamboraException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`profiles_profile_id_get`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProfilesProfileIdGetError {
    Status400(crate::models::BamboraException),
    Status401(crate::models::BamboraException),
    Status402(crate::models::BamboraException),
    Status403(crate::models::BamboraException),
    Status405(crate::models::BamboraException),
    Status500(crate::models::BamboraException),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`profiles_profile_id_put`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ProfilesProfileIdPutError {
    Status400(crate::models::BamboraException),
    Status401(crate::models::BamboraException),
    Status402(crate::models::BamboraException),
    Status403(crate::models::BamboraException),
    Status405(crate::models::BamboraException),
    Status500(crate::models::BamboraException),
    UnknownValue(serde_json::Value),
}


/// Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
pub async fn profiles_post(configuration: &configuration::Configuration, create_profile_body: crate::models::CreateProfileBody) -> Result<crate::models::ProfileResponse, Error<ProfilesPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/profiles", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&create_profile_body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProfilesPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a card on the profile.
pub async fn profiles_profile_id_cards_card_id_delete(configuration: &configuration::Configuration, profile_id: &str, card_id: i32) -> Result<crate::models::ProfileResponse, Error<ProfilesProfileIdCardsCardIdDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/profiles/{profileId}/cards/{cardId}", local_var_configuration.base_path, profileId=crate::apis::urlencode(profile_id), cardId=card_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProfilesProfileIdCardsCardIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Update the details of a card on the profile.
pub async fn profiles_profile_id_cards_card_id_put(configuration: &configuration::Configuration, profile_id: &str, card_id: i32, card: crate::models::ProfileCard) -> Result<crate::models::ProfileResponse, Error<ProfilesProfileIdCardsCardIdPutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/profiles/{profileId}/cards/{cardId}", local_var_configuration.base_path, profileId=crate::apis::urlencode(profile_id), cardId=card_id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&card);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProfilesProfileIdCardsCardIdPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get all of the cards on the profile.
pub async fn profiles_profile_id_cards_get(configuration: &configuration::Configuration, profile_id: &str) -> Result<crate::models::ProfileGetCards, Error<ProfilesProfileIdCardsGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/profiles/{profileId}/cards", local_var_configuration.base_path, profileId=crate::apis::urlencode(profile_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProfilesProfileIdCardsGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Add a card to the profile. Note that there is a default limit of 1 card per profile. You can change this in your Profiles settings in the back office.
pub async fn profiles_profile_id_cards_post(configuration: &configuration::Configuration, profile_id: &str, card: crate::models::ProfileCard) -> Result<crate::models::ProfileResponse, Error<ProfilesProfileIdCardsPostError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/profiles/{profileId}/cards", local_var_configuration.base_path, profileId=crate::apis::urlencode(profile_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&card);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProfilesProfileIdCardsPostError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Delete a Payment Profile using the profile ID, also known as the Customer Code.
pub async fn profiles_profile_id_delete(configuration: &configuration::Configuration, profile_id: &str) -> Result<crate::models::ProfileResponse, Error<ProfilesProfileIdDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/profiles/{profileId}", local_var_configuration.base_path, profileId=crate::apis::urlencode(profile_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProfilesProfileIdDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Get a Payment Profile using the profile ID, also known as the Customer Code.
pub async fn profiles_profile_id_get(configuration: &configuration::Configuration, profile_id: &str) -> Result<crate::models::PaymentProfile, Error<ProfilesProfileIdGetError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/profiles/{profileId}", local_var_configuration.base_path, profileId=crate::apis::urlencode(profile_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProfilesProfileIdGetError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Create a new Payment Profile using either a card or a Legato token. You must supply one of them.
pub async fn profiles_profile_id_put(configuration: &configuration::Configuration, profile_id: &str, update_profile_body: crate::models::UpdateProfileBody) -> Result<crate::models::ProfileResponse, Error<ProfilesProfileIdPutError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/profiles/{profileId}", local_var_configuration.base_path, profileId=crate::apis::urlencode(profile_id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    local_var_req_builder = local_var_req_builder.json(&update_profile_body);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ProfilesProfileIdPutError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

